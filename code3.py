def plots(imgs, titles):
    imgs= np.array(imgs).astype (np. uint8)
    # if type(ims[0]) is np.ndarray: 
    #   ims np.array(ims).astype (np. uint8)
    #   if (ims.shape[-1] != 3):
    #       ims ims.transpose((0,2,3,1))
    f = plt.figure(figsize=(20, 20))
    rows=10
    cols=10 # len(ims)//rows if len(ims) % 2e else len(ims)//rows + 1
    for i in range(0,50):
        sp=f.add_subplot(rows, cols, i+1)
        sp.axis('off')
        if titles is not None:
            sp.set_title(list(batches.class_indices.keys())[np.argmax(titles[i])])
        plt.imshow(imgs[i])
        



def malware_cnn_model():

    Malware_model = Sequential () 
    Malware_model.add(Conv2D(30, kernel_size=(3, 3),
            activation= 'relu',
            input_shape=(64,64,3)))
    Malware_model.add(MaxPooling2D(pool_size=(2, 2)))
    Malware_model.add(Conv2D(15, (3, 3), activation='relu'))
    Malware_model.add(MaxPooling2D(pool_size=(2, 2)))
    Malware_model.add(Dropout(0.25))
    Malware_model.add(Flatten()) 
    Malware_model.add(Dense(128, activation='relu'))
    Malware_model.add (Dropout (0.5))
    Malware_model.add(Dense (50, activation='relu'))
    Malware_model.add(Dense (25, activation='softmax')) 
    Malware_model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])
    return Malware_model




def malware_model():
    img_size =64
    left_inputs = Input(shape=(img_size, img_size, 3))
    filters=32
    x = left_inputs
    for i in range(3):
        x = Conv2D(filters,3,activation='relu', padding='same')(x)
        x = Dropout(0.3)(x)
        x= MaxPooling2D()(x) 
        filters*=2
        right_inputs=Input(shape=(img_size, img_size, 3)) 
        y=right_inputs
        filters=32
    for i in range(3):
        y = Conv2D(filters, 3, activation='relu',padding='same', dilation_rate=2)
        y = Dropout(0.3)(y)
        y = MaxPooling2D()(y)
        filters*=2
    y=concatenate([x,y])
    y = Flatten()(y)
    y=Dropout(0.3)(y)
    op = Dense (25, activation='softmax')(y)
    model = Model (inputs=[left_inputs, right_inputs], outputs=op) 
    model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])
    return model
